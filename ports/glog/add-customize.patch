diff --git a/src/glog/log_severity.h b/src/glog/log_severity.h
index 99945a4..aa3cd79 100644
--- a/src/glog/log_severity.h
+++ b/src/glog/log_severity.h
@@ -44,16 +44,17 @@
 // you ever need to change their values or add a new severity.
 typedef int LogSeverity;
 
-const int GLOG_INFO = 0, GLOG_WARNING = 1, GLOG_ERROR = 2, GLOG_FATAL = 3,
-  NUM_SEVERITIES = 4;
+const int GLOG_TRACE = 0, GLOG_DEBUG = 1, GLOG_INFO = 2, GLOG_WARNING = 3, GLOG_ERROR = 4, GLOG_FATAL = 5,
+    NUM_SEVERITIES = 6;
 #ifndef GLOG_NO_ABBREVIATED_SEVERITIES
 # ifdef ERROR
 #  error ERROR macro is defined. Define GLOG_NO_ABBREVIATED_SEVERITIES before including logging.h. See the document for detail.
 # endif
-const int INFO = GLOG_INFO, WARNING = GLOG_WARNING,
+const int TRACE = GLOG_TRACE, DEBUG = GLOG_DEBUG, INFO = GLOG_INFO, WARNING = GLOG_WARNING,
   ERROR = GLOG_ERROR, FATAL = GLOG_FATAL;
 #endif
 
+
 // DFATAL is FATAL in debug mode, ERROR in normal mode
 #ifdef NDEBUG
 #define DFATAL_LEVEL ERROR
diff --git a/src/glog/logging.h.in b/src/glog/logging.h.in
index 9968b96..24e0d65 100644
--- a/src/glog/logging.h.in
+++ b/src/glog/logging.h.in
@@ -392,6 +392,27 @@ DECLARE_bool(stop_logging_if_full_disk);
 // better to have compact code for these operations.
 
 #if GOOGLE_STRIP_LOG == 0
+#define COMPACT_GOOGLE_LOG_TRACE @ac_google_namespace@::LogMessage( \
+      __FILE__, __LINE__, @ac_google_namespace@::GLOG_TRACE)
+#define LOG_TO_STRING_TRACE(message) @ac_google_namespace@::LogMessage( \
+      __FILE__, __LINE__, @ac_google_namespace@::GLOG_TRACE, message)
+#else
+#define COMPACT_GOOGLE_LOG_TRACE @ac_google_namespace@::NullStream()
+#define LOG_TO_STRING_TRACE(message) @ac_google_namespace@::NullStream()
+#endif
+
+#if GOOGLE_STRIP_LOG <= 1
+#define COMPACT_GOOGLE_LOG_DEBUG @ac_google_namespace@::LogMessage( \
+      __FILE__, __LINE__, @ac_google_namespace@::GLOG_DEBUG)
+#define LOG_TO_STRING_DEBUG(message) @ac_google_namespace@::LogMessage( \
+      __FILE__, __LINE__, @ac_google_namespace@::GLOG_DEBUG, message)
+#else
+#define COMPACT_GOOGLE_LOG_DEBUG @ac_google_namespace@::NullStream()
+#define LOG_TO_STRING_DEBUG(message) @ac_google_namespace@::NullStream()
+#endif
+
+
+#if GOOGLE_STRIP_LOG <= 2
 #define COMPACT_GOOGLE_LOG_INFO @ac_google_namespace@::LogMessage( \
       __FILE__, __LINE__)
 #define LOG_TO_STRING_INFO(message) @ac_google_namespace@::LogMessage( \
@@ -401,7 +422,7 @@ DECLARE_bool(stop_logging_if_full_disk);
 #define LOG_TO_STRING_INFO(message) @ac_google_namespace@::NullStream()
 #endif
 
-#if GOOGLE_STRIP_LOG <= 1
+#if GOOGLE_STRIP_LOG <= 3
 #define COMPACT_GOOGLE_LOG_WARNING @ac_google_namespace@::LogMessage( \
       __FILE__, __LINE__, @ac_google_namespace@::GLOG_WARNING)
 #define LOG_TO_STRING_WARNING(message) @ac_google_namespace@::LogMessage( \
@@ -411,7 +432,7 @@ DECLARE_bool(stop_logging_if_full_disk);
 #define LOG_TO_STRING_WARNING(message) @ac_google_namespace@::NullStream()
 #endif
 
-#if GOOGLE_STRIP_LOG <= 2
+#if GOOGLE_STRIP_LOG <= 4
 #define COMPACT_GOOGLE_LOG_ERROR @ac_google_namespace@::LogMessage( \
       __FILE__, __LINE__, @ac_google_namespace@::GLOG_ERROR)
 #define LOG_TO_STRING_ERROR(message) @ac_google_namespace@::LogMessage( \
@@ -421,7 +442,7 @@ DECLARE_bool(stop_logging_if_full_disk);
 #define LOG_TO_STRING_ERROR(message) @ac_google_namespace@::NullStream()
 #endif
 
-#if GOOGLE_STRIP_LOG <= 3
+#if GOOGLE_STRIP_LOG <= 5
 #define COMPACT_GOOGLE_LOG_FATAL @ac_google_namespace@::LogMessageFatal( \
       __FILE__, __LINE__)
 #define LOG_TO_STRING_FATAL(message) @ac_google_namespace@::LogMessage( \
@@ -448,6 +469,18 @@ DECLARE_bool(stop_logging_if_full_disk);
 #define COMPACT_GOOGLE_LOG_DFATAL @ac_google_namespace@::NullStreamFatal()
 #endif
 
+#define GOOGLE_LOG_TRACE(counter)  \
+  @ac_google_namespace@::LogMessage(__FILE__, __LINE__, @ac_google_namespace@::GLOG_TRACE, counter, \
+  &@ac_google_namespace@::LogMessage::SendToLog)
+#define SYSLOG_TRACE(counter)  \
+  @ac_google_namespace@::LogMessage(__FILE__, __LINE__, @ac_google_namespace@::GLOG_TRACE, counter, \
+  &@ac_google_namespace@::LogMessage::SendToSyslogAndLog)
+#define GOOGLE_LOG_DEBUG(counter)  \
+  @ac_google_namespace@::LogMessage(__FILE__, __LINE__, @ac_google_namespace@::GLOG_DEBUG, counter, \
+  &@ac_google_namespace@::LogMessage::SendToLog)
+#define SYSLOG_DEBUG(counter)  \
+  @ac_google_namespace@::LogMessage(__FILE__, __LINE__, @ac_google_namespace@::GLOG_DEBUG, counter, \
+  &@ac_google_namespace@::LogMessage::SendToSyslogAndLog)
 #define GOOGLE_LOG_INFO(counter) @ac_google_namespace@::LogMessage(__FILE__, __LINE__, @ac_google_namespace@::GLOG_INFO, counter, &@ac_google_namespace@::LogMessage::SendToLog)
 #define SYSLOG_INFO(counter) \
   @ac_google_namespace@::LogMessage(__FILE__, __LINE__, @ac_google_namespace@::GLOG_INFO, counter, \
diff --git a/src/logging.cc b/src/logging.cc
index 0c86cf6..de43b1f 100644
--- a/src/logging.cc
+++ b/src/logging.cc
@@ -272,22 +272,35 @@ enum GLogColor {
   COLOR_DEFAULT,
   COLOR_RED,
   COLOR_GREEN,
-  COLOR_YELLOW
+  COLOR_YELLOW,
+  COLOR_CYAN,
+  COLOR_WHITE,
+  COLOR_YELLOW_BOLD,
+  COLOR_RED_BOLD,
+  COLOR_WHITE_BOLD_B
 };
 
 static GLogColor SeverityToColor(LogSeverity severity) {
   assert(severity >= 0 && severity < NUM_SEVERITIES);
   GLogColor color = COLOR_DEFAULT;
   switch (severity) {
+  case GLOG_TRACE:
+    color = COLOR_WHITE;
+    break;
+  case GLOG_DEBUG:
+    color = COLOR_CYAN;
+    break;
   case GLOG_INFO:
-    color = COLOR_DEFAULT;
+    color = COLOR_GREEN;
     break;
   case GLOG_WARNING:
-    color = COLOR_YELLOW;
+    color = COLOR_YELLOW_BOLD;
     break;
   case GLOG_ERROR:
+    color = COLOR_RED_BOLD;
+    break;
   case GLOG_FATAL:
-    color = COLOR_RED;
+    color = COLOR_WHITE_BOLD_B;
     break;
   default:
     // should never get here.
@@ -301,9 +314,13 @@ static GLogColor SeverityToColor(LogSeverity severity) {
 // Returns the character attribute for the given color.
 static WORD GetColorAttribute(GLogColor color) {
   switch (color) {
-    case COLOR_RED:    return FOREGROUND_RED;
-    case COLOR_GREEN:  return FOREGROUND_GREEN;
-    case COLOR_YELLOW: return FOREGROUND_RED | FOREGROUND_GREEN;
+    case COLOR_WHITE:    return FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE;
+    case COLOR_CYAN:  return FOREGROUND_GREEN | FOREGROUND_BLUE;
+    case COLOR_GREEN: return FOREGROUND_GREEN;
+    case COLOR_YELLOW_BOLD: return FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY;
+    case COLOR_RED_BOLD: return FOREGROUND_RED | FOREGROUND_INTENSITY;
+    case COLOR_WHITE_BOLD_B: return BACKGROUND_RED | FOREGROUND_RED |
+      FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY;
     default:           return 0;
   }
 }
@@ -370,17 +387,17 @@ struct LogMessage::LogMessageData  {
 static Mutex log_mutex;
 
 // Number of messages sent at each severity.  Under log_mutex.
-int64 LogMessage::num_messages_[NUM_SEVERITIES] = {0, 0, 0, 0};
+int64 LogMessage::num_messages_[NUM_SEVERITIES] = {0, 0, 0, 0, 0, 0};
 
 // Globally disable log writing (if disk is full)
 static bool stop_writing = false;
 
 const char*const LogSeverityNames[NUM_SEVERITIES] = {
-  "INFO", "WARNING", "ERROR", "FATAL"
+  "TRACE", "DEBUG", "INFO", "WARNING", "ERROR", "FATAL"
 };
 
 // Has the user called SetExitOnDFatal(true)?
-static bool exit_on_dfatal = true;
+static bool exit_on_dfatal = false;
 
 const char* GetLogSeverityName(LogSeverity severity) {
   return LogSeverityNames[severity];
@@ -429,8 +446,8 @@ class LogFileObject : public base::Logger {
   static const uint32 kRolloverAttemptFrequency = 0x20;
 
   Mutex lock_;
-  bool base_filename_selected_;
   string base_filename_;
+  bool base_filename_selected_;
   string symlink_basename_;
   string filename_extension_;     // option users can specify (eg to add port#)
   FILE* file_;
@@ -441,6 +458,8 @@ class LogFileObject : public base::Logger {
   unsigned int rollover_attempt_;
   int64 next_flush_time_;         // cycle count at which to flush log
 
+  int64 g_logTooBigAddName = 0;
+
   // Actually create a logfile using the value of base_filename_ and the
   // supplied argument time_pid_string
   // REQUIRES: lock_ is held
@@ -831,8 +850,8 @@ namespace {
 
 LogFileObject::LogFileObject(LogSeverity severity,
                              const char* base_filename)
-  : base_filename_selected_(base_filename != NULL),
-    base_filename_((base_filename != NULL) ? base_filename : ""),
+  : base_filename_((base_filename != NULL) ? base_filename : ""),
+    base_filename_selected_(!base_filename_.empty()),
     symlink_basename_(glog_internal_namespace_::ProgramInvocationShortName()),
     filename_extension_(),
     file_(NULL),
@@ -903,10 +922,9 @@ void LogFileObject::FlushUnlocked(){
 }
 
 bool LogFileObject::CreateLogfile(const string& time_pid_string) {
-  string string_filename = base_filename_+filename_extension_+
-                           time_pid_string;
+  string string_filename = base_filename_+ time_pid_string + "." + filename_extension_;
   const char* filename = string_filename.c_str();
-  int fd = open(filename, O_WRONLY | O_CREAT | O_EXCL, FLAGS_logfile_mode);
+  int fd = open(filename, O_WRONLY | O_CREAT | O_APPEND, FLAGS_logfile_mode);
   if (fd == -1) return false;
 #ifdef HAVE_FCNTL
   // Mark the file close-on-exec. We don't really care if this fails
@@ -972,8 +990,17 @@ void LogFileObject::Write(bool force_flush,
     return;
   }
 
-  if (static_cast<int>(file_length_ >> 20) >= MaxLogSize() ||
-      PidHasChanged()) {
+  bool logTooBig = false;
+  bool logChangedDay = DayHasChanged();
+  if ((logTooBig = static_cast<int>(file_length_ >> 20)) >= MaxLogSize() ||
+      /*PidHasChanged() ||*/ logChangedDay) {
+
+    if (logTooBig)
+      g_logTooBigAddName++;
+
+    if (logChangedDay)
+      g_logTooBigAddName = 1;
+
     if (file_ != NULL) fclose(file_);
     file_ = NULL;
     file_length_ = bytes_since_flush_ = dropped_mem_length_ = 0;
@@ -988,21 +1015,47 @@ void LogFileObject::Write(bool force_flush,
     if (++rollover_attempt_ != kRolloverAttemptFrequency) return;
     rollover_attempt_ = 0;
 
-    struct ::tm tm_time;
+    struct::tm tm_time;
     localtime_r(&timestamp, &tm_time);
 
     // The logfile's filename will have the date/time & pid in it
     ostringstream time_pid_stream;
     time_pid_stream.fill('0');
-    time_pid_stream << 1900+tm_time.tm_year
+    time_pid_stream << '.' << 1900+tm_time.tm_year
                     << setw(2) << 1+tm_time.tm_mon
                     << setw(2) << tm_time.tm_mday
-                    << '-'
-                    << setw(2) << tm_time.tm_hour
+                    /*<< setw(2) << tm_time.tm_hour
                     << setw(2) << tm_time.tm_min
-                    << setw(2) << tm_time.tm_sec
-                    << '.'
-                    << GetMainThreadPid();
+                    << setw(2) << tm_time.tm_sec*/
+                    /*<< '.'
+                    << GetMainThreadPid()*/;
+    while (true)
+    {
+      char szAddName[16] = "";
+      if (g_logTooBigAddName != 1)
+      {
+        sprintf(szAddName,"(%d)",g_logTooBigAddName);
+      }
+//       string strfilename = base_filename_+filename_extension_+ time_pid_stream.str()+string(szAddName);
+      string strfilename = base_filename_ + time_pid_stream.str()+string(szAddName) ;
+      struct stat statbuf;
+      statbuf.st_size = 0;
+      stat(strfilename.c_str(),&statbuf);
+      if ( statbuf.st_size < MaxLogSize()*1024*1024 )
+      {
+        file_length_ += statbuf.st_size;
+        bytes_since_flush_ += statbuf.st_size;
+        break;
+      }
+      g_logTooBigAddName++;
+    }
+
+    if (g_logTooBigAddName != 1)
+    {
+      time_pid_stream << '(' << g_logTooBigAddName << ')';
+    }
+    time_pid_stream << filename_extension_;
+
     const string& time_pid_string = time_pid_stream.str();
 
     if (base_filename_selected_) {
@@ -1076,8 +1129,8 @@ void LogFileObject::Write(bool force_flush,
                        << setw(2) << tm_time.tm_sec << '\n'
                        << "Running on machine: "
                        << LogDestination::hostname() << '\n'
-                       << "Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu "
-                       << "threadid file:line] msg" << '\n';
+                       << "Log line format: [threadid]mmdd hh:mm:ss.uuuuuu "
+                       << "file:line] msg" << '\n';
     const string& file_header_string = file_header_stream.str();
 
     const int header_len = file_header_string.size();
@@ -1278,17 +1331,18 @@ void LogMessage::Init(const char* file,
   //    (log level, GMT month, date, time, thread_id, file basename, line)
   // We exclude the thread_id for the default thread.
   if (FLAGS_log_prefix && (line != kNoLogPrefix)) {
-    stream() << LogSeverityNames[severity][0]
-             << setw(2) << 1+data_->tm_time_.tm_mon
-             << setw(2) << data_->tm_time_.tm_mday
+    stream() << '[' << LogSeverityNames[severity][0]
+             << static_cast<unsigned int>(GetTID())
+//             << setw(2) << 1+data_->tm_time_.tm_mon
+//             << setw(2) << data_->tm_time_.tm_mday
              << ' '
              << setw(2) << data_->tm_time_.tm_hour  << ':'
              << setw(2) << data_->tm_time_.tm_min   << ':'
              << setw(2) << data_->tm_time_.tm_sec   << "."
              << setw(6) << usecs
              << ' '
-             << setfill(' ') << setw(5)
-             << static_cast<unsigned int>(GetTID()) << setfill('0')
+             /*<< setfill(' ') << setw(5)*/
+             /*<< static_cast<unsigned int>(GetTID())*/ << setfill('0')
              << ' '
              << data_->basename_ << ':' << data_->line_ << "] ";
   }
@@ -2110,7 +2164,7 @@ LogMessageFatal::LogMessageFatal(const char* file, int line,
 
 LogMessageFatal::~LogMessageFatal() {
     Flush();
-    LogMessage::Fail();
+    //LogMessage::Fail();
 }
 
 namespace base {
diff --git a/src/utilities.cc b/src/utilities.cc
index 25c4b76..98e6a58 100644
--- a/src/utilities.cc
+++ b/src/utilities.cc
@@ -245,6 +245,22 @@ bool PidHasChanged() {
   return true;
 }
 
+static int32 g_main_day = 0;
+bool DayHasChanged() {
+  time_t raw_time;
+  struct tm* tm_info;
+
+  time(&raw_time);
+  tm_info = localtime(&raw_time);
+
+  if (tm_info->tm_mday != g_main_day) {
+    g_main_day = tm_info->tm_mday;
+    return true;
+  }
+
+  return false;
+}
+
 pid_t GetTID() {
   // On Linux and MacOSX, we try to use gettid().
 #if defined OS_LINUX || defined OS_MACOSX
diff --git a/src/utilities.h b/src/utilities.h
index ca21cfb..05a0811 100644
--- a/src/utilities.h
+++ b/src/utilities.h
@@ -174,6 +174,7 @@ WallTime WallTime_Now();
 
 int32 GetMainThreadPid();
 bool PidHasChanged();
+bool DayHasChanged();
 
 pid_t GetTID();
 
diff --git a/src/windows/glog/log_severity.h b/src/windows/glog/log_severity.h
index 22a4191..cf6b8c8 100644
--- a/src/windows/glog/log_severity.h
+++ b/src/windows/glog/log_severity.h
@@ -48,13 +48,13 @@
 // you ever need to change their values or add a new severity.
 typedef int LogSeverity;
 
-const int GLOG_INFO = 0, GLOG_WARNING = 1, GLOG_ERROR = 2, GLOG_FATAL = 3,
-  NUM_SEVERITIES = 4;
+const int GLOG_TRACE = 0, GLOG_DEBUG = 1, GLOG_INFO = 2, GLOG_WARNING = 3, GLOG_ERROR = 4, GLOG_FATAL = 5,
+  NUM_SEVERITIES = 6;
 #ifndef GLOG_NO_ABBREVIATED_SEVERITIES
 # ifdef ERROR
 #  error ERROR macro is defined. Define GLOG_NO_ABBREVIATED_SEVERITIES before including logging.h. See the document for detail.
 # endif
-const int INFO = GLOG_INFO, WARNING = GLOG_WARNING,
+const int TRACE = GLOG_TRACE, DEBUG = GLOG_DEBUG, INFO = GLOG_INFO, WARNING = GLOG_WARNING,
   ERROR = GLOG_ERROR, FATAL = GLOG_FATAL;
 #endif
 
diff --git a/src/windows/glog/logging.h b/src/windows/glog/logging.h
index 3681fa3..2598b5e 100755
--- a/src/windows/glog/logging.h
+++ b/src/windows/glog/logging.h
@@ -396,6 +396,26 @@ DECLARE_bool(stop_logging_if_full_disk);
 // better to have compact code for these operations.
 
 #if GOOGLE_STRIP_LOG == 0
+#define COMPACT_GOOGLE_LOG_TRACE google::LogMessage( \
+      __FILE__, __LINE__, google::GLOG_TRACE)
+#define LOG_TO_STRING_TRACE(message) google::LogMessage( \
+      __FILE__, __LINE__, google::GLOG_TRACE, message)
+#else
+#define COMPACT_GOOGLE_LOG_TRACE google::NullStream()
+#define LOG_TO_STRING_TRACE(message) google::NullStream()
+#endif
+
+#if GOOGLE_STRIP_LOG <= 1
+#define COMPACT_GOOGLE_LOG_DEBUG google::LogMessage( \
+      __FILE__, __LINE__, google::GLOG_DEBUG)
+#define LOG_TO_STRING_DEBUG(message) google::LogMessage( \
+      __FILE__, __LINE__, google::GLOG_DEBUG, message)
+#else
+#define COMPACT_GOOGLE_LOG_DEBUG google::NullStream()
+#define LOG_TO_STRING_DEBUG(message) google::NullStream()
+#endif
+
+#if GOOGLE_STRIP_LOG <= 2
 #define COMPACT_GOOGLE_LOG_INFO google::LogMessage( \
       __FILE__, __LINE__)
 #define LOG_TO_STRING_INFO(message) google::LogMessage( \
@@ -405,7 +425,7 @@ DECLARE_bool(stop_logging_if_full_disk);
 #define LOG_TO_STRING_INFO(message) google::NullStream()
 #endif
 
-#if GOOGLE_STRIP_LOG <= 1
+#if GOOGLE_STRIP_LOG <= 3
 #define COMPACT_GOOGLE_LOG_WARNING google::LogMessage( \
       __FILE__, __LINE__, google::GLOG_WARNING)
 #define LOG_TO_STRING_WARNING(message) google::LogMessage( \
@@ -415,7 +435,7 @@ DECLARE_bool(stop_logging_if_full_disk);
 #define LOG_TO_STRING_WARNING(message) google::NullStream()
 #endif
 
-#if GOOGLE_STRIP_LOG <= 2
+#if GOOGLE_STRIP_LOG <= 4
 #define COMPACT_GOOGLE_LOG_ERROR google::LogMessage( \
       __FILE__, __LINE__, google::GLOG_ERROR)
 #define LOG_TO_STRING_ERROR(message) google::LogMessage( \
@@ -425,7 +445,7 @@ DECLARE_bool(stop_logging_if_full_disk);
 #define LOG_TO_STRING_ERROR(message) google::NullStream()
 #endif
 
-#if GOOGLE_STRIP_LOG <= 3
+#if GOOGLE_STRIP_LOG <= 5
 #define COMPACT_GOOGLE_LOG_FATAL google::LogMessageFatal( \
       __FILE__, __LINE__)
 #define LOG_TO_STRING_FATAL(message) google::LogMessage( \
@@ -452,6 +472,16 @@ DECLARE_bool(stop_logging_if_full_disk);
 #define COMPACT_GOOGLE_LOG_DFATAL google::NullStreamFatal()
 #endif
 
+#define GOOGLE_LOG_TRACE(counter) google::LogMessage(__FILE__, __LINE__, \
+  google::GLOG_TRACE, counter, &google::LogMessage::SendToLog)
+#define SYSLOG_TRACE(counter) \
+  google::LogMessage(__FILE__, __LINE__, google::GLOG_TRACE, counter, \
+  &google::LogMessage::SendToSyslogAndLog)
+#define GOOGLE_LOG_DEBUG(counter) google::LogMessage(__FILE__, __LINE__, \
+  google::GLOG_DEBUG, counter, &google::LogMessage::SendToLog)
+#define SYSLOG_DEBUG(counter) \
+  google::LogMessage(__FILE__, __LINE__, google::GLOG_DEBUG, counter, \
+  &google::LogMessage::SendToSyslogAndLog)
 #define GOOGLE_LOG_INFO(counter) google::LogMessage(__FILE__, __LINE__, google::GLOG_INFO, counter, &google::LogMessage::SendToLog)
 #define SYSLOG_INFO(counter) \
   google::LogMessage(__FILE__, __LINE__, google::GLOG_INFO, counter, \
