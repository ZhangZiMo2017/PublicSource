diff --git a/src/logging.cc b/src/logging.cc
index 0c86cf6..30b359d 100644
--- a/src/logging.cc
+++ b/src/logging.cc
@@ -272,7 +272,8 @@ enum GLogColor {
   COLOR_DEFAULT,
   COLOR_RED,
   COLOR_GREEN,
-  COLOR_YELLOW
+  COLOR_YELLOW,
+  COLOR_CYAN
 };
 
 static GLogColor SeverityToColor(LogSeverity severity) {
@@ -283,9 +284,11 @@ static GLogColor SeverityToColor(LogSeverity severity) {
     color = COLOR_DEFAULT;
     break;
   case GLOG_WARNING:
-    color = COLOR_YELLOW;
+    color = COLOR_GREEN;
     break;
   case GLOG_ERROR:
+    color = COLOR_YELLOW;
+    break;
   case GLOG_FATAL:
     color = COLOR_RED;
     break;
@@ -304,6 +307,7 @@ static WORD GetColorAttribute(GLogColor color) {
     case COLOR_RED:    return FOREGROUND_RED;
     case COLOR_GREEN:  return FOREGROUND_GREEN;
     case COLOR_YELLOW: return FOREGROUND_RED | FOREGROUND_GREEN;
+    case COLOR_CYAN: return FOREGROUND_GREEN | FOREGROUND_BLUE;
     default:           return 0;
   }
 }
@@ -380,7 +384,7 @@ const char*const LogSeverityNames[NUM_SEVERITIES] = {
 };
 
 // Has the user called SetExitOnDFatal(true)?
-static bool exit_on_dfatal = true;
+static bool exit_on_dfatal = false;
 
 const char* GetLogSeverityName(LogSeverity severity) {
   return LogSeverityNames[severity];
@@ -903,8 +907,7 @@ void LogFileObject::FlushUnlocked(){
 }
 
 bool LogFileObject::CreateLogfile(const string& time_pid_string) {
-  string string_filename = base_filename_+filename_extension_+
-                           time_pid_string;
+  string string_filename = base_filename_+ time_pid_string + "." + filename_extension_;
   const char* filename = string_filename.c_str();
   int fd = open(filename, O_WRONLY | O_CREAT | O_EXCL, FLAGS_logfile_mode);
   if (fd == -1) return false;
@@ -973,7 +976,7 @@ void LogFileObject::Write(bool force_flush,
   }
 
   if (static_cast<int>(file_length_ >> 20) >= MaxLogSize() ||
-      PidHasChanged()) {
+      PidHasChanged() || DayHasChanged()) {
     if (file_ != NULL) fclose(file_);
     file_ = NULL;
     file_length_ = bytes_since_flush_ = dropped_mem_length_ = 0;
@@ -988,21 +991,20 @@ void LogFileObject::Write(bool force_flush,
     if (++rollover_attempt_ != kRolloverAttemptFrequency) return;
     rollover_attempt_ = 0;
 
-    struct ::tm tm_time;
+    struct::tm tm_time;
     localtime_r(&timestamp, &tm_time);
 
     // The logfile's filename will have the date/time & pid in it
     ostringstream time_pid_stream;
     time_pid_stream.fill('0');
-    time_pid_stream << 1900+tm_time.tm_year
+    time_pid_stream << '.' << 1900+tm_time.tm_year
                     << setw(2) << 1+tm_time.tm_mon
                     << setw(2) << tm_time.tm_mday
-                    << '-'
                     << setw(2) << tm_time.tm_hour
                     << setw(2) << tm_time.tm_min
                     << setw(2) << tm_time.tm_sec
-                    << '.'
-                    << GetMainThreadPid();
+                    /*<< '.'
+                    << GetMainThreadPid()*/;
     const string& time_pid_string = time_pid_stream.str();
 
     if (base_filename_selected_) {
@@ -1076,8 +1078,8 @@ void LogFileObject::Write(bool force_flush,
                        << setw(2) << tm_time.tm_sec << '\n'
                        << "Running on machine: "
                        << LogDestination::hostname() << '\n'
-                       << "Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu "
-                       << "threadid file:line] msg" << '\n';
+                       << "Log line format: [threadid]mmdd hh:mm:ss.uuuuuu "
+                       << "file:line] msg" << '\n';
     const string& file_header_string = file_header_stream.str();
 
     const int header_len = file_header_string.size();
@@ -1278,17 +1280,18 @@ void LogMessage::Init(const char* file,
   //    (log level, GMT month, date, time, thread_id, file basename, line)
   // We exclude the thread_id for the default thread.
   if (FLAGS_log_prefix && (line != kNoLogPrefix)) {
-    stream() << LogSeverityNames[severity][0]
-             << setw(2) << 1+data_->tm_time_.tm_mon
-             << setw(2) << data_->tm_time_.tm_mday
+    stream() << '[' << LogSeverityNames[severity][0]
+             << static_cast<unsigned int>(GetTID())
+//             << setw(2) << 1+data_->tm_time_.tm_mon
+//             << setw(2) << data_->tm_time_.tm_mday
              << ' '
              << setw(2) << data_->tm_time_.tm_hour  << ':'
              << setw(2) << data_->tm_time_.tm_min   << ':'
              << setw(2) << data_->tm_time_.tm_sec   << "."
              << setw(6) << usecs
              << ' '
-             << setfill(' ') << setw(5)
-             << static_cast<unsigned int>(GetTID()) << setfill('0')
+             /*<< setfill(' ') << setw(5)*/
+             /*<< static_cast<unsigned int>(GetTID())*/ << setfill('0')
              << ' '
              << data_->basename_ << ':' << data_->line_ << "] ";
   }
@@ -2110,7 +2113,7 @@ LogMessageFatal::LogMessageFatal(const char* file, int line,
 
 LogMessageFatal::~LogMessageFatal() {
     Flush();
-    LogMessage::Fail();
+    //LogMessage::Fail();
 }
 
 namespace base {
diff --git a/src/utilities.cc b/src/utilities.cc
index 25c4b76..98e6a58 100644
--- a/src/utilities.cc
+++ b/src/utilities.cc
@@ -245,6 +245,22 @@ bool PidHasChanged() {
   return true;
 }
 
+static int32 g_main_day = 0;
+bool DayHasChanged() {
+  time_t raw_time;
+  struct tm* tm_info;
+
+  time(&raw_time);
+  tm_info = localtime(&raw_time);
+
+  if (tm_info->tm_mday != g_main_day) {
+    g_main_day = tm_info->tm_mday;
+    return true;
+  }
+
+  return false;
+}
+
 pid_t GetTID() {
   // On Linux and MacOSX, we try to use gettid().
 #if defined OS_LINUX || defined OS_MACOSX
diff --git a/src/utilities.h b/src/utilities.h
index ca21cfb..05a0811 100644
--- a/src/utilities.h
+++ b/src/utilities.h
@@ -174,6 +174,7 @@ WallTime WallTime_Now();
 
 int32 GetMainThreadPid();
 bool PidHasChanged();
+bool DayHasChanged();
 
 pid_t GetTID();
 
